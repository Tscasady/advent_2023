x: 4000 m: 4000 a: 4000 s: 4000
s: 1-1350
a: 1-2005
x: 1-1415

//update result if we hit 'A' by adding any new numbers to results
//if we hit 'r' update current set of testing ranges by removing the values that pointed us to r
//create new set of ranges based on last set (not results)
//remove success from current so 1351-4000 becomes 1351-3447

x: 1416-4000 m: 4000 a: 2006-4000 s: 1351-4000
s: 2770 - 4000
s: 3448 - 4000

x: 1417-4000 m: 4000 a: 2006-4000 s: 1351-3447
s: 2770-3447
m: 1548-4000

x: 1417-4000 m: 1-1547  a: 2006-4000 s: 1353 - 2770




alternate idea, a queue to traverse a tree
if hit 'a' update result and pop from queue. 
'r' pop from queue

x: 4000 m: 4000 a: 4000 s: 4000
[PartRange {x: all, m: all, a: all, s: 1351 - 4000}, PartRange {x: all m: all s: 1351 - 4000, a: 2006 - 4000}] each instance of the q is a set of ranges, where each range is the current range, but take the opposite action for the current test
s: 1-1350
a: 1-2005
x: 1-1416
result 
  s: 1-1350
  a: 1-2005
  m: all
  x: 1-1416
x: 1416+
x 2662 + 
result
  s: 1-1350
  a: 1-2005
  m: all
  x : 1-1416, 2662 + 



x: 1416-4000 m: 4000 a: 4000 s: 4000
s: 1-1350
a: 1-2005
x: 1416-2662





assume we traverse the tests and we end up with a set of ranges that are valid. 
we cant just subtracte the number of combinations from our range from the total number. we would end up with 0 because of duplicates.
so imagine for 3 values and numbers 0-9
729 combinations

ranges:
(1), (0-9), (2-4) 30 - the overlap from other ranges =  30 
(2-4), (3-7), (1) 12 - there is no overlap here, all fields must have at leaast one value from the other set of ranges = 12   
(1-3) (2), (2-4)  9  - 3, exactly three overlaps with first set (1, 2, 2) (1, 2, 3) (1, 2, 4), the total number of overlap for each range * together = 6
                  6 - 0 = 6 there is no overlap in the last comparison
sum together gives 48 unique combinations


1922959865480
is too low
